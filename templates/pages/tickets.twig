{% extends 'base.twig' %}

{% block navigation %}
    {% include 'components/navigation.twig' with {'user': user, 'app_name': app_name} %}
{% endblock %}

{% block content %}
<div class="min-h-screen bg-gray-900">
    <div class="max-w-7xl mx-auto px-3 sm:px-4 lg:px-6 py-4 sm:py-6 lg:py-8">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-4 mb-6 sm:mb-8">
            <div class="flex-1 min-w-0">
                <h2 class="text-2xl sm:text-3xl lg:text-4xl font-bold text-white mb-1 sm:mb-2 truncate">Ticket Management</h2>
                <p class="text-gray-400 text-sm sm:text-base">Create, view, edit and manage all your tickets</p>
            </div>
            <button 
                id="toggleFormBtn"
                class="w-full sm:w-auto bg-blue-500 text-white px-4 py-2.5 sm:px-4 sm:py-2 rounded-lg font-medium hover:bg-blue-600 transition flex items-center justify-center gap-2 text-sm sm:text-base mt-2 sm:mt-0"
            >
                <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                </svg>
                New Ticket
            </button>
        </div>

        <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-4 sm:p-6 mb-4 sm:mb-6">
            <div class="flex flex-col lg:flex-row gap-3 sm:gap-4 items-start lg:items-end">
                <div class="w-full lg:flex-1">
                    <label class="block text-sm font-medium text-gray-300 mb-2">Search Tickets</label>
                    <div class="relative">
                        <input 
                            type="text" 
                            id="searchInput"
                            placeholder="Search by title or description..."
                            class="w-full pl-9 pr-4 py-2 border border-gray-600 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent placeholder-gray-400 text-sm sm:text-base"
                        >
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-4 w-4 sm:h-5 sm:w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                            </svg>
                        </div>
                    </div>
                </div>
                
                <div class="w-full lg:w-auto flex flex-col sm:flex-row gap-3 sm:gap-4">
                    <div class="flex-1 sm:flex-none">
                        <label class="block text-sm font-medium text-gray-300 mb-2">Status</label>
                        <select 
                            id="statusFilter"
                            class="w-full sm:w-36 lg:w-40 px-3 py-2 border border-gray-600 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base"
                        >
                            <option value="all">All Status</option>
                            <option value="open">Open</option>
                            <option value="in_progress">In Progress</option>
                            <option value="closed">Closed</option>
                        </select>
                    </div>
                    
                    <div class="flex-1 sm:flex-none">
                        <label class="block text-sm font-medium text-gray-300 mb-2">Priority</label>
                        <select 
                            id="priorityFilter"
                            class="w-full sm:w-36 lg:w-40 px-3 py-2 border border-gray-600 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base"
                        >
                            <option value="all">All Priority</option>
                            <option value="high">High</option>
                            <option value="medium">Medium</option>
                            <option value="low">Low</option>
                        </select>
                    </div>
                    
                    <div class="flex items-end">
                        <button 
                            id="clearFilters"
                            class="w-full sm:w-auto px-4 py-2 text-sm text-gray-400 hover:text-gray-300 border border-gray-600 rounded-lg hover:bg-gray-700 transition mt-2 sm:mt-0"
                        >
                            Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div id="ticketForm" class="hidden bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-4 sm:p-6 mb-4 sm:mb-6">
            <h3 id="formTitle" class="text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4">Create New Ticket</h3>
            <form id="ticketFormElement" class="space-y-3 sm:space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">Title *</label>
                    <input 
                        type="text" 
                        name="title" 
                        class="w-full px-3 py-2 border border-gray-600 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base"
                        placeholder="Enter ticket title"
                        required
                    >
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">Description</label>
                    <textarea 
                        name="description" 
                        rows="3"
                        class="w-full px-3 py-2 border border-gray-600 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base"
                        placeholder="Enter ticket description"
                    ></textarea>
                </div>

                <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Status *</label>
                        <select 
                            name="status"
                            class="w-full px-3 py-2 border border-gray-600 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base"
                            required
                        >
                            <option value="open">Open</option>
                            <option value="in_progress">In Progress</option>
                            <option value="closed">Closed</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-300 mb-2">Priority</label>
                        <select 
                            name="priority"
                            class="w-full px-3 py-2 border border-gray-600 bg-gray-700 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm sm:text-base"
                        >
                            <option value="medium">Medium</option>
                            <option value="high">High</option>
                            <option value="low">Low</option>
                        </select>
                    </div>
                </div>

                <div class="flex flex-col sm:flex-row gap-2 sm:gap-3 pt-2">
                    <button 
                        type="submit"
                        class="bg-blue-500 text-white px-4 py-2.5 sm:px-5 sm:py-2 rounded-lg font-medium hover:bg-blue-600 transition text-sm sm:text-base flex-1 text-center"
                    >
                        Create Ticket
                    </button>
                    <button 
                        type="button"
                        onclick="toggleTicketForm()"
                        class="bg-gray-600 text-white px-4 py-2.5 sm:px-5 sm:py-2 rounded-lg font-medium hover:bg-gray-500 transition text-sm sm:text-base flex-1 text-center"
                    >
                        Cancel
                    </button>
                </div>
            </form>
        </div>

        <div id="ticketsList" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
        </div>
    </div>
</div>

{% include 'components/delete-modal.twig' %}

<div id="toast" class="hidden fixed top-4 right-4 bg-gray-800 border border-gray-700 rounded-lg shadow-lg p-4 max-w-sm z-50">
    <div class="flex items-center space-x-3">
        <div id="toast-icon"></div>
        <p id="toast-message" class="text-white text-sm"></p>
    </div>
</div>

{% include 'components/delete-modal.twig' %}

<div id="toast" class="hidden fixed top-4 right-4 bg-gray-800 border border-gray-700 rounded-lg shadow-lg p-4 max-w-sm z-50">
    <div class="flex items-center space-x-3">
        <div id="toast-icon"></div>
        <p id="toast-message" class="text-white text-sm"></p>
    </div>
</div>

<style>
.line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
}
</style>
{% endblock %}

{% block extra_js %}
<script>
let tickets = [];
let editingTicketId = null;
let searchTerm = "";
let statusFilter = "all";
let priorityFilter = "all";
let ticketToDelete = null;

function getCurrentUser() {
    const session = JSON.parse(localStorage.getItem('ticketapp_session') || 'null');
    return session ? { id: session.userId, email: session.email } : null;
}

function requireAuth() {
    const user = getCurrentUser();
    if (!user) {
        showToast('Please log in to continue', 'error');
        setTimeout(() => {
            window.location.href = '/login';
        }, 1500);
        return null;
    }
    return user;
}

function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toast-message');
    const toastIcon = document.getElementById('toast-icon');
    
    const icons = {
        success: '<svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/></svg>',
        error: '<svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/></svg>'
    };
    
    if (toast && toastMessage && toastIcon) {
        toastMessage.textContent = message;
        toastIcon.innerHTML = icons[type] || icons.success;
        toast.classList.remove('hidden');
        setTimeout(() => toast.classList.add('hidden'), 4000);
    } else {
        console.log(`${type}: ${message}`);
    }
}

function toggleTicketForm() {
    const form = document.getElementById("ticketForm");
    const button = document.getElementById("toggleFormBtn");
    
    if (!form || !button) return;

    const isHidden = form.classList.contains("hidden");
    form.classList.toggle("hidden");

    if (isHidden) {
        button.textContent = "Cancel";
        editingTicketId = null;
        document.getElementById("formTitle").textContent = "Create New Ticket";
        resetTicketForm();
        form.scrollIntoView({ behavior: "smooth" });
    } else {
        button.textContent = "New Ticket";
        editingTicketId = null;
        resetTicketForm();
    }
}

function resetTicketForm() {
    const form = document.getElementById("ticketFormElement");
    if (form) form.reset();
}

function handleTicketSubmit(e) {
    e.preventDefault();
    e.stopPropagation();

    const user = requireAuth();
    if (!user) return;

    const formData = new FormData(e.target);
    const title = formData.get("title").trim();
    const description = formData.get("description").trim();
    const status = formData.get("status");
    const priority = formData.get("priority");

    if (!title) {
        showToast("Title is required", "error");
        return;
    }
    if (title.length < 3) {
        showToast("Title must be at least 3 characters", "error");
        return;
    }

    if (editingTicketId) {
        const index = tickets.findIndex((t) => t.id === editingTicketId);
        if (index !== -1) {
            tickets[index] = {
                ...tickets[index],
                title,
                description,
                status,
                priority,
                updatedAt: new Date().toISOString()
            };
            showToast("Ticket updated successfully!", "success");
        }
    } else {
        const newTicket = {
            id: `ticket_${Date.now()}`,
            title,
            description,
            status,
            priority,
            createdBy: user.id,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        tickets.push(newTicket);
        showToast("Ticket created successfully!", "success");
    }

    saveTickets();
    loadTickets();
    toggleTicketForm();
}

function loadTickets() {
    const user = getCurrentUser();
    if (!user) {
        tickets = [];
        renderTickets([]);
        return;
    }

    const allTickets = JSON.parse(localStorage.getItem("ticketapp_tickets") || "{}");
    tickets = allTickets[user.id] || [];
    filterTickets();
}

function saveTickets() {
    const user = getCurrentUser();
    if (!user) return;

    const allTickets = JSON.parse(localStorage.getItem("ticketapp_tickets") || "{}");
    allTickets[user.id] = tickets;
    localStorage.setItem("ticketapp_tickets", JSON.stringify(allTickets));
}

function filterTickets() {
    const filteredTickets = tickets.filter((ticket) => {
        const matchesSearch = !searchTerm ||
            ticket.title.toLowerCase().includes(searchTerm) ||
            (ticket.description && ticket.description.toLowerCase().includes(searchTerm));

        const matchesStatus = statusFilter === "all" || ticket.status === statusFilter;
        const matchesPriority = priorityFilter === "all" || ticket.priority === priorityFilter;

        return matchesSearch && matchesStatus && matchesPriority;
    });

    renderTickets(filteredTickets);
}

function renderTickets(ticketsToRender) {
    const container = document.getElementById("ticketsList");
    if (!container) return;

    if (ticketsToRender.length === 0) {
        container.innerHTML = `
            <div class="col-span-full">
                <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 text-center py-12">
                    <div class="w-16 h-16 bg-gray-700 rounded-full mx-auto mb-4 flex items-center justify-center">
                        <svg class="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"/>
                        </svg>
                    </div>
                    <h3 class="text-lg font-semibold text-white mb-2">No tickets found</h3>
                    <p class="text-gray-400">Try adjusting your search or filters</p>
                </div>
            </div>
        `;
        return;
    }

    container.innerHTML = ticketsToRender.map(ticket => createTicketCard(ticket)).join("");
}

function createTicketCard(ticket) {
    const statusColors = {
        open: "bg-green-500/20 text-green-400 border-green-500/30",
        in_progress: "bg-yellow-500/20 text-yellow-400 border-yellow-500/30",
        closed: "bg-blue-500/20 text-blue-400 border-blue-500/30",
    };
    const priorityColors = {
        high: "bg-red-500/20 text-red-400 border-red-500/30",
        medium: "bg-yellow-500/20 text-yellow-400 border-yellow-500/30",
        low: "bg-blue-500/20 text-blue-400 border-blue-500/30",
    };

    return `
        <div class="bg-gray-800 rounded-xl shadow-sm border border-gray-700 p-6 hover:shadow-lg transition hover:border-gray-600">
            <div class="flex justify-between items-start mb-4">
                <h3 class="text-lg font-semibold text-white flex-1">${escapeHtml(ticket.title)}</h3>
                <div class="flex gap-2 ml-3">
                    <button onclick="editTicket('${ticket.id}')" class="p-2 text-blue-400 hover:bg-blue-500/20 rounded-lg transition" title="Edit">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                        </svg>
                    </button>
                    <button onclick="openDeleteModal('${ticket.id}')" class="p-2 text-red-400 hover:bg-red-500/20 rounded-lg transition" title="Delete">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                    </button>
                </div>
            </div>
            ${ticket.description ? `<p class="text-sm text-gray-400 mb-4 line-clamp-3">${escapeHtml(ticket.description)}</p>` : ""}
            <div class="flex flex-wrap gap-2 mb-4">
                <span class="px-2.5 py-1 rounded text-sm font-medium border ${statusColors[ticket.status]}">${ticket.status.replace("_", " ")}</span>
                ${ticket.priority ? `<span class="px-2.5 py-1 rounded text-sm font-medium border ${priorityColors[ticket.priority]}">${ticket.priority}</span>` : ""}
            </div>
            <div class="flex items-center justify-between text-xs text-gray-500 pt-4 border-t border-gray-700">
                <span>Created: ${formatDate(ticket.createdAt)}</span>
                <span class="px-2 py-1 bg-gray-700 text-gray-300 rounded font-medium">${ticket.id}</span>
            </div>
        </div>
    `;
}

function escapeHtml(text) {
    const map = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#039;",
    };
    return text.replace(/[&<>"']/g, (m) => map[m]);
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
        year: "numeric",
    });
}

function editTicket(id) {
    const user = requireAuth();
    if (!user) return;

    const ticket = tickets.find((t) => t.id === id);
    if (!ticket) return;

    editingTicketId = id;
    const form = document.getElementById("ticketForm");
    form.classList.remove("hidden");
    document.getElementById("formTitle").textContent = "Edit Ticket";
    document.getElementById("toggleFormBtn").textContent = "Cancel";

    const formElement = document.getElementById("ticketFormElement");
    formElement.title.value = ticket.title;
    formElement.description.value = ticket.description || "";
    formElement.status.value = ticket.status;
    formElement.priority.value = ticket.priority || "medium";

    form.scrollIntoView({ behavior: "smooth" });
}

function openDeleteModal(id) {
    const user = requireAuth();
    if (!user) return;

    const ticket = tickets.find((t) => t.id === id);
    if (!ticket) return;

    ticketToDelete = id;
    const modal = document.getElementById("deleteModal");
    const ticketTitle = document.getElementById("deleteTicketTitle");

    if (modal && ticketTitle) {
        ticketTitle.textContent = ticket.title;
        modal.classList.remove("hidden");
        modal.classList.add("flex");
        document.getElementById("cancelDeleteBtn").focus();
    }
}

function closeDeleteModal() {
    const modal = document.getElementById("deleteModal");
    if (modal) {
        modal.classList.add("hidden");
        modal.classList.remove("flex");
        ticketToDelete = null;
    }
}

function confirmDelete() {
    if (!ticketToDelete) return;

    const user = requireAuth();
    if (!user) return;

    tickets = tickets.filter((t) => t.id !== ticketToDelete);
    saveTickets();
    loadTickets();
    closeDeleteModal();
    showToast("Ticket deleted successfully!", "success");
}

document.addEventListener("DOMContentLoaded", () => {
    if (!requireAuth()) return;
    
    loadTickets();
    
    const ticketForm = document.getElementById("ticketFormElement");
    if (ticketForm) {
        ticketForm.addEventListener("submit", handleTicketSubmit);
    }

    const toggleBtn = document.getElementById("toggleFormBtn");
    if (toggleBtn) {
        toggleBtn.addEventListener("click", toggleTicketForm);
    }

    const searchInput = document.getElementById("searchInput");
    const statusFilterSelect = document.getElementById("statusFilter");
    const priorityFilterSelect = document.getElementById("priorityFilter");
    const clearFiltersBtn = document.getElementById("clearFilters");

    if (searchInput) {
        searchInput.addEventListener("input", (e) => {
            searchTerm = e.target.value.toLowerCase();
            filterTickets();
        });
    }

    if (statusFilterSelect) {
        statusFilterSelect.addEventListener("change", (e) => {
            statusFilter = e.target.value;
            filterTickets();
        });
    }

    if (priorityFilterSelect) {
        priorityFilterSelect.addEventListener("change", (e) => {
            priorityFilter = e.target.value;
            filterTickets();
        });
    }

    if (clearFiltersBtn) {
        clearFiltersBtn.addEventListener("click", () => {
            searchTerm = "";
            statusFilter = "all";
            priorityFilter = "all";
            searchInput.value = "";
            statusFilterSelect.value = "all";
            priorityFilterSelect.value = "all";
            filterTickets();
            showToast("Filters cleared", "success");
        });
    }

    const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
    const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
    const deleteModal = document.getElementById("deleteModal");

    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener("click", confirmDelete);
    }

    if (cancelDeleteBtn) {
        cancelDeleteBtn.addEventListener("click", closeDeleteModal);
    }

    if (deleteModal) {
        deleteModal.addEventListener("click", (e) => {
            if (e.target === deleteModal) closeDeleteModal();
        });
    }

    document.addEventListener("keydown", (e) => {
        if (e.key === "Escape") closeDeleteModal();
    });
});

window.toggleTicketForm = toggleTicketForm;
window.editTicket = editTicket;
window.openDeleteModal = openDeleteModal;
window.closeDeleteModal = closeDeleteModal;
window.confirmDelete = confirmDelete;
</script>
{% endblock %}